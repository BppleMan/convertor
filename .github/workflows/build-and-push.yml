name: Build and Push (GHCR)

on:
  push:
    branches: [ "main", "dev" ]
    tags: [ "v*", "release-*" ]
  workflow_dispatch:
    inputs:
      extra_tag:
        description: "Optional extra image tag (e.g. canary)"
        type: string
        required: false
      profile:
        description: "Cargo build profile"
        type: choice
        options: [ release, debug ]
        required: false
        default: release

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/convertor
  DOCKERFILE: ./Dockerfile
  CONTEXT_DIR: .
  TARGET_TRIPLE: x86_64-unknown-linux-musl
  PROFILE: release            # 默认 profile（当 workflow_dispatch 未传入时 fallback）
  BIN_NAME: convertor

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 解析手动触发参数并生成 fallback（输出: steps.vars.outputs.profile / extra）
      - name: Resolve inputs (profile/extra_tag)
        id: vars
        shell: bash
        run: |
          # profile: 手动触发优先生效，否则用 env.PROFILE
          p="${{ github.event.inputs.profile }}"
          if [ -z "$p" ]; then p="${{ env.PROFILE }}"; fi
          echo "profile=$p" >> $GITHUB_OUTPUT

          # extra_tag: 仅当 workflow_dispatch 且非空时使用
          e="${{ github.event.inputs.extra_tag }}"
          echo "extra=$e" >> $GITHUB_OUTPUT
          echo "Resolved profile=$p extra_tag=$e"

      # Rust 工具链
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Cargo 缓存
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 安装 Zig（不要用 apt）
      - name: Setup Zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.12.0

      - name: Install cargo-zigbuild & tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config
          cargo install cargo-zigbuild --locked
          rustup target add x86_64-unknown-linux-musl

      # 根据解析后的 profile 构建 MUSL 二进制（release 带 --release，debug 不带）
      - name: Build (zig + MUSL)
        # env:
        #   RUSTFLAGS: "-C target-feature=+crt-static"
        shell: bash
        run: |
          if [ "${{ steps.vars.outputs.profile }}" = "release" ]; then
            cargo zigbuild --target $TARGET_TRIPLE --release
          else
            cargo zigbuild --target $TARGET_TRIPLE
          fi

      # 登录 GHCR（使用自动注入的 GITHUB_TOKEN）
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 生成 tags/labels（去掉 v 前缀，输出 steps.meta.outputs.*）
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # 分支策略
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            # 唯一回溯
            type=sha,format=short
            # 语义化（自动从 v1.2.3 解析出 1.2.3/1.2/1）
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # 手动触发时的额外 tag（仅 workflow_dispatch 且非空）
            type=raw,value=${{ steps.vars.outputs.extra }},enable=${{ github.event_name == 'workflow_dispatch' && steps.vars.outputs.extra != '' }}
          labels: |
            org.opencontainers.image.title=convertor
            org.opencontainers.image.description=A profile converter for Surge/Clash.
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=Apache-2.0

      # buildx + 缓存
      - name: Set up QEMU (optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # 构建并推送镜像（把版本信息注入到 Dockerfile 的 ARG / OCI labels）
      - name: Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT_DIR }}
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            TARGET_TRIPLE=${{ env.TARGET_TRIPLE }}
            PROFILE=${{ steps.vars.outputs.profile }}
            BIN_NAME=${{ env.BIN_NAME }}
            BIN_PATH=target/${{ env.TARGET_TRIPLE }}/${{ steps.vars.outputs.profile }}/${{ env.BIN_NAME }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
