name: Build and Push (GHCR)

on:
  push:
    branches: [ "main", "dev" ]
    tags: [ "v*", "release-*" ]
  workflow_dispatch:
    inputs:
      extra_tag:
        description: "Optional extra image tag (e.g. canary)"
        type: string
        required: false
      profile:
        description: "Cargo build profile (release|debug)"
        type: choice
        options: [ release, debug ]
        required: false
        default: release

permissions:
  contents: read
  packages: write

env:
  # 你的镜像名（固定成你仓库名，避免大小写问题）
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/convertor

  # Dockerfile 在仓库根目录
  DOCKERFILE: ./Dockerfile
  CONTEXT_DIR: .

  # Rust 目标（你的 Dockerfile 期望的构建产物路径）
  TARGET_TRIPLE: x86_64-unknown-linux-musl
  PROFILE: release
  BIN_NAME: convertor

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Rust 工具链（官方维护）----
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # ---- Cargo 缓存 ----
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # ---- 准备 zig + cargo-zigbuild（产出 MUSL 静态二进制）----
      - name: Install zig & tools
        run: |
          sudo apt-get update
          sudo apt-get install -y zig musl-tools pkg-config
          cargo install cargo-zigbuild --locked

      - name: Build (zig + MUSL)
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: |
          cargo zigbuild --target $TARGET_TRIPLE --release

      # ---- 登录 GHCR（GITHUB_TOKEN 自动注入；配合 packages: write 权限）----
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---- 生成 tags/labels （自动去掉 v 前缀并生成 1.2.3/1.2/1）----
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # 分支策略
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            # 唯一回溯
            type=sha,format=short
            # 语义化（打 tag 时自动解析，支持 v 前缀）
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.title=convertor
            org.opencontainers.image.description=A profile converter for Surge/Clash.
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=Apache-2.0

      # ---- buildx + 缓存 ----
      - name: Set up QEMU (optional for future multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # ---- 构建并推送镜像 ----
      - name: Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT_DIR }}
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            TARGET_TRIPLE=${{ env.TARGET_TRIPLE }}
            PROFILE=${{ env.PROFILE }}
            BIN_NAME=${{ env.BIN_NAME }}
            BIN_PATH=target/${{ env.TARGET_TRIPLE }}/${{ env.PROFILE }}/${{ env.BIN_NAME }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
