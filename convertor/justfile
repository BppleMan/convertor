#!/usr/bin/env just --justfile

set shell := ["zsh", "-uc"]

prepare:
    cargo install cargo-zigbuild
    brew install zig

#╭──────────────────────────────────────────────╮
#│                   release                    │
#╰──────────────────────────────────────────────╯

prod-all:
    just all release

prod-convd:
    just convd release

prod-confly:
    just confly release

install bin="convd":
    cargo install --bin {{ bin }} --path .

publish:
    cargo publish -p convertor
    cargo publish -p convd
    cargo publish -p confly

#╭──────────────────────────────────────────────╮
#│                     dev                      │
#╰──────────────────────────────────────────────╯

dev-all:
    just all dev

dev-convd:
    just convd dev

dev-confly:
    just confly dev

#╭──────────────────────────────────────────────╮
#│                    build                     │
#╰──────────────────────────────────────────────╯

all profile="dev":
    time cargo build --workspace --all-targets --profile {{ profile }}

convd profile="dev":
    time cargo build --bin convd --profile {{ profile }}

confly profile="dev":
    time cargo build --bin confly --profile {{ profile }}

#╭──────────────────────────────────────────────╮
#│                     test                     │
#╰──────────────────────────────────────────────╯

test-convertor:
    cargo insta test -p convertor --features=testkit

test-convd:
    cargo insta test -p convd

test-confly:
    cargo insta test -p confly

#╭──────────────────────────────────────────────╮
#│                linux-release                 │
#╰──────────────────────────────────────────────╯

prod-linux:
    just linux release

prod-musl:
    just musl release

prod-cross:
    just cross release

#╭──────────────────────────────────────────────╮
#│                 linux-alpine                 │
#╰──────────────────────────────────────────────╯

alpine-linux:
    just linux alpine

alpine-musl:
    just musl alpine

alpine-cross:
    just cross alpine

#╭──────────────────────────────────────────────╮
#│                  linux-dev                   │
#╰──────────────────────────────────────────────╯

dev-linux:
    just linux dev

dev-musl:
    just musl dev

dev-cross:
    just cross dev

#╭──────────────────────────────────────────────╮
#│                    linux                     │
#╰──────────────────────────────────────────────╯

linux profile="dev":
    time CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc \
    cargo build  --profile {{ profile }} --bin convd --target x86_64-unknown-linux-gnu

musl profile="dev":
    time cargo zigbuild --profile {{ profile }} --bin convd --target x86_64-unknown-linux-musl

cross profile="dev":
    time cross build  --profile {{ profile }} --bin convd --target x86_64-unknown-linux-gnu

#╭──────────────────────────────────────────────╮
#│                    docker                    │
#╰──────────────────────────────────────────────╯

TARGET := "x86_64-unknown-linux-musl"
BIN := "convertor"
CONTAINER_NAME := "convertor-dev"

# 1) 打本地镜像（只打包宿主构建产物）
image profile="dev":
    #!/bin/sh
    TARGET_TRIPLE="x86_64-unknown-linux-musl"
    BIN_NAME="convd"
    PROFILE_PATH="debug"
    VERSION=$(docker run --rm -v ./target/$TARGET_TRIPLE/$PROFILE_PATH/$BIN_NAME:/app/$BIN_NAME alpine:3.20 /app/$BIN_NAME -V)
    BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)
    REGISTRY="local"
    if [ "{{ profile }}" = "dev" ]; then
        PROFILE_PATH="debug"
        REGISTRY="local"
    elif [ "{{ profile }}" = "prod" ]; then
        PROFILE_PATH="release"
        REGISTRY="ghcr.io/bppleman/convertor"
    elif [ "{{ profile }}" = "alpine" ]; then
        PROFILE_PATH="alpine"
        REGISTRY="ghcr.io/bppleman/convertor"
    fi
    VERSION=${VERSION//[^A-Za-z0-9_.-]/_}
    echo TARGET_TRIPLE=$TARGET_TRIPLE
    echo BIN_NAME=$BIN_NAME
    echo PROFILE_PATH=$PROFILE_PATH
    echo VERSION=$VERSION
    echo REGISTRY=$REGISTRY
    docker build -f Dockerfile \
        --build-arg TARGET_TRIPLE=$TARGET_TRIPLE \
        --build-arg BIN_NAME=$BIN_NAME \
        --build-arg PROFILE_PATH=$PROFILE_PATH \
        --build-arg VERSION=$VERSION \
        --build-arg BUILD_DATE=$BUILD_DATE \
        -t $REGISTRY/$BIN_NAME:$VERSION .

run:
    #!/bin/sh
    VERSION=$(docker run --rm -v ./target/x86_64-unknown-linux-musl/debug/convd:/app/convd alpine:3.20 /app/convd -V)
    VERSION="dev-$VERSION"
    VERSION=${VERSION//[^A-Za-z0-9_.-]/_}
    echo VERSION=$VERSION
    docker run --rm -it \
        -v ~/.convertor/convertor.toml:/app/.convertor/convertor.toml \
        -e REDIS_ENDPOINT \
        -e REDIS_CONVERTOR_USERNAME \
        -e REDIS_CONVERTOR_PASSWORD \
        -e REDIS_CA_CERT \
        --name convd-temp \
        local/convd:$VERSION
