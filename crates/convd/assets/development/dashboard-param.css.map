{
  "version": 3,
  "sources": ["src/app/page/dashboard/dashboard-param/dashboard-param.scss", "node_modules/.pnpm/@angular+material@20.2.0_@angular+cdk@20.2.0_@angular+common@20.2.1_@angular+core@20.2._6b8f1d6e0ae1028a2a33a6e325236330/node_modules/@angular/material/core/tokens/_token-utils.scss"],
  "sourcesContent": ["@use \"@angular/material\" as mat;\n\n:host {\n    display:        flex;\n    flex-direction: column;\n    width:          100%;\n    gap:            8px;\n\n    form {\n        display:        flex;\n        flex-direction: column;\n        gap:            8px;\n\n        .form-row {\n            display:        flex;\n            flex-direction: row;\n            gap:            12px;\n        }\n\n        .form-suffix {\n            width: 82.5px;\n        }\n\n        mat-form-field {\n            flex: 1;\n        }\n\n        mat-slide-toggle {\n            padding-top: 4px;\n        }\n\n        button[matButton=\"filled\"] {\n            margin-top: 2px;\n        }\n\n        mat-form-field {\n            @include mat.form-field-overrides((\n                container-text-size: 12px,\n                outlined-label-text-color: color-mix(in srgb, var(--mat-sys-on-surface), transparent 30%),\n                outlined-hover-label-text-color: color-mix(in srgb, var(--mat-sys-on-surface), transparent 10%),\n                outlined-hover-outline-color: color-mix(in srgb, var(--mat-sys-on-surface), transparent 70%),\n            ));\n        }\n\n        mat-select {\n            @include mat.select-overrides((\n                trigger-text-size: 12px,\n            ));\n        }\n\n        button.error {\n            @include mat.button-overrides((\n                filled-label-text-color: var(--mat-sys-on-error),\n                filled-container-color: var(--mat-sys-error),\n            ))\n        }\n\n        ::ng-deep {\n            .mat-mdc-option {\n                min-height: 28px;\n            }\n        }\n\n    }\n}\n", "@use '../style/sass-utils';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:string';\n\n// Creates a CSS variable, including the fallback if provided.\n@function _create-var($name, $fallback: null) {\n  @if ($fallback) {\n    @return var($name, $fallback);\n  } @else {\n    @return var($name);\n  }\n}\n\n// Returns a list of overrides for the given M3 get-tokens mixin and prefix. Each token has its\n// prefix removed since the overrides API expects its absence. The returned map includes \"all\" for\n// all override tokens, and also the subsets with keys base, color, typography, and density.\n@function get-overrides($tokens, $prefix) {\n  $base: remove-token-prefixes(map.get($tokens, base), $prefix);\n  $color: remove-token-prefixes(map.get($tokens, color), $prefix);\n  $typography: remove-token-prefixes(map.get($tokens, typography), $prefix);\n  $density: remove-token-prefixes(map.get($tokens, density), $prefix);\n  $all: ();\n  @each $map in ($base, $color, $typography, $density) {\n    $all: map.merge($all, $map);\n  }\n\n  @return (\n    all: $all,\n    base: $base,\n    color: $color,\n    typography: $typography,\n    density: $density,\n  );\n}\n\n// Removes a prefix from each component token in the provided map of prefixed tokens.\n@function remove-token-prefixes($prefixed-tokens: (), $prefix) {\n  $tokens: ();\n  @each $prefixed-token, $value in $prefixed-tokens {\n    $token: string.slice($prefixed-token, string.length($prefix) + 2);\n    $tokens: map.set($tokens, $token, $value);\n  }\n  @return $tokens;\n}\n\n// Returns the token slot value.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n@function slot($token, $fallbacks, $fallback: null) {\n  // Fallbacks are a map of base, color, typography, and density tokens. To simplify\n  // lookup, flatten these token groups into a single map.\n  $fallbacks-flattened: ();\n  @each $tokens in map.values($fallbacks) {\n    @each $token, $value in $tokens {\n      $fallbacks-flattened: map.set($fallbacks-flattened, $token, $value);\n    }\n  }\n  @if not map.has-key($fallbacks-flattened, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are:' +\n        #{map.keys($fallbacks-flattened)};\n  }\n\n  $sys-fallback: map.get($fallbacks-flattened, $token);\n  @if (sass-utils.is-css-var-name($sys-fallback)) {\n    $sys-fallback: _create-var($sys-fallback, $fallback);\n  }\n\n  @return _create-var(--mat-#{$token}, $sys-fallback);\n}\n\n// Outputs a map of token values as CSS variable definitions.\n@mixin values($tokens) {\n  @include sass-utils.current-selector-or-root() {\n    @each $key, $value in $tokens {\n      @if $value != null {\n        --mat-#{$key}: #{$value};\n      }\n    }\n  }\n}\n\n/// Emits new token values for the given token overrides.\n/// Verifies that the overrides passed in are valid tokens.\n/// New token values are emitted under the current selector or root.\n@mixin batch-create-token-values($overrides: (), $namespace-configs) {\n  @include sass-utils.current-selector-or-root() {\n    $prefixed-name-data: ();\n    $all-names: ();\n\n    @each $config in $namespace-configs {\n      $namespace: map.get($config, namespace);\n      $prefix: if(map.has-key($config, prefix), map.get($config, prefix), '');\n      $tokens: map.get(map.get($config, tokens), all);\n      @each $name, $value in $tokens {\n        $prefixed-name: $prefix + $name;\n        $all-names: list.append($all-names, $prefixed-name, $separator: comma);\n        $prefixed-name-data: map.set($prefixed-name-data, $prefixed-name, ($namespace, $name));\n      }\n    }\n\n    @each $name, $value in $overrides {\n      @if map.has-key($prefixed-name-data, $name) {\n        $data: map.get($prefixed-name-data, $name);\n        $namespace: list.nth($data, 1);\n        $name: list.nth($data, 2);\n        $prefixed-name: $namespace + '-' + $name;\n        @include values(($prefixed-name: $value));\n      } @else {\n        @error #{'Invalid token name `'}#{$name}#{'`. '}#{'Valid tokens are: '}#{$all-names};\n      }\n    }\n  }\n}\n"],
  "mappings": ";AAEA;AACI,WAAA;AACA,kBAAA;AACA,SAAA;AACA,OAAA;;AAEA,MAAA;AACI,WAAA;AACA,kBAAA;AACA,OAAA;;AAEA,MAAA,KAAA,CAAA;AACI,WAAA;AACA,kBAAA;AACA,OAAA;;AAGJ,MAAA,KAAA,CAAA;AACI,SAAA;;AAGJ,MAAA,KAAA;AACI,QAAA;;AAGJ,MAAA,KAAA;AACI,eAAA;;AAGJ,MAAA,KAAA,MAAA,CAAA;AACI,cAAA;;AAGJ,MAAA,KAAA;ACyCA,wCAAA;AAAA,8CAAA,UAAA,GAAA,IAAA,EAAA,IAAA,qBAAA,EAAA,YAAA;AAAA,oDAAA,UAAA,GAAA,IAAA,EAAA,IAAA,qBAAA,EAAA,YAAA;AAAA,iDAAA,UAAA,GAAA,IAAA,EAAA,IAAA,qBAAA,EAAA,YAAA;;ADhCA,MAAA,KAAA;ACgCA,kCAAA;;AD1BA,MAAA,KAAA,MAAA,CAAA;AC0BA,wCAAA,IAAA;AAAA,uCAAA,IAAA;;ADlBI,MAAA,KAAA,UAAA,CAAA;AACI,cAAA;;",
  "names": []
}
